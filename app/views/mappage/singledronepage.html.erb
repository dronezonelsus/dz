<script src="//maps.google.com/maps/api/js?key=AIzaSyA2b6Qe48bvmxyYCCr1sA1QqrXCG8dJuYk"></script>
<script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
<script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script> <!-- only if you need custom infoboxes -->
<%= javascript_include_tag  'js.cookie.js' %>


<div class="body_margin" id="single">
	<div class="row">
		<div class="col-lg-12 col-md-12 col-sm-12 panel marqueeTrackingDrone" id="divAboveMap">
			<p>Tracking <span id="tracking_drone_name"></span>...Thank you for using DroneZone.</p>
		</div>
	</div>
	<div class="row">
		<div id="single_page_map" class="pos col-lg-12 col-md-12 col-sm-12" style='height: 550px;'>
			<script type="text/javascript">
				// Declare globally needed variables for the single map marker
				var marker;
				var myLatlng;
				var polyLat;
				var polyLng;
				var iconBase;
				var map;
				var mapOptions;
				var info;
				var regNumber;
				var drone_nam;
				var drone_lat;
				var drone_lng;
				var tracking_drone_name = document.getElementById('tracking_drone_name');
				var departure;
				var arrival;
				var simulatedLatIncrease = 0.001;
				var simulatedLngIncrease = 0.0001;
				

				//############### Load single marker (drone) on the map #################
				$(document).ready(function(){
					
					//############### Function to get drone name/registration number value from cureent URL ###############
					function getQueryVariable(variable)
					{
					       var query = window.location.search.substring(1);
					       var drone_variables = query.split("&");
					       for (var i=0;i<drone_variables.length;i++) {
				               var pair = drone_variables[i].split("=");
				               if(pair[0] == variable){
				               	return pair[1];
				               }
					       }
					       return(false);
					}
					//############### Call getQueryVariable function to get drone name value ###############		
					info = getQueryVariable("infowindow");
					if(info.indexOf("%20") >= 0){
						info = info.replace("%20", " ");
					}
					//############### Call getQueryVariable function to get registration number value ###############		
					regNumber = getQueryVariable("regNumber");
					if(regNumber.indexOf("%20") >= 0){
						regNumber = regNumber.replace("%20", " ");
					}
					tracking_drone_name.innerHTML = info;
					//tracking_drone_reg_number.innerHTML = regNumber;

					//############### Ajax to GET double-clicked drone's data to render on map AND render map layout ###############
					$.ajax({
						type: "GET",
						url: "<%= Rails.application.routes.url_helpers.mappage_index_path %>",
						cache: false,
						contentType: 'application/json',
						dataType: "json",
						data: <%= raw @hash.to_json %>,
						success: function(result){  
							//console.log(result);
							//console.log(marker.getTitle());
							for(var i = 0; i < result.length; i++){
								//Precondition: Clicked drone from initial view (mappage#index) is the same as one of the drones on initial view 
								if( info == result[i]['infowindow'] && regNumber == result[i]['marker_title']){
									console.log(result[i]['lat']);
									polyLat = result[i]['lat'];
									polyLng = result[i]['lng'];
									//Rebuild map marker with data recieved from mappage controller : index action
									myLatlng = new google.maps.LatLng(result[i]['lat'], result[i]['lng']);
									mapOptions = {
									  zoom: 14,
									  center: myLatlng
									}
									map = new google.maps.Map(document.getElementById("single_page_map"), mapOptions);
									iconBase = "<%= ActionController::Base.helpers.asset_path('DroneMap.png') %>";
									marker = new google.maps.Marker({
									    position: myLatlng,
									    title: result[i]['infowindow'],
									    icon: iconBase
									});
									departure = result[i]["departure"];
									arrival = result[i]["arrival"];
									document.getElementById("departure").innerHTML = departure;
									document.getElementById("arrival").innerHTML = arrival;
									
									//########## Create object containing no-fly zones coordinates and population(population is temporary) ##########
								    // var citymap = {
									   //  shreveportRegional: {
								    //       center: {lat: 32.4546, lng: -93.8285},
								    //       population: 100,
								    //     },
								    //     barksdaleAFB: {
								    //       center: {lat: 32.5019, lng: -93.6571},
								    //       population: 110
								    //     }
							     //  	};

							      	var geocoder = new google.maps.Geocoder();
									geocodeDepartureAddress(geocoder, map, departure);
									geocodeArrivalAddress(geocoder, map, arrival);
									
							      	//############### Construct the circle for each value in citymap ###############
							        // Note: We scale the area of the circle based on the population.
							        // for (var city in citymap) {
							        //   // Add the circle for this city to the map.
							        //   var cityCircle = new google.maps.Circle({
							        //     strokeColor: '#FF0000',
							        //     strokeOpacity: 0.8,
							        //     strokeWeight: 2,
							        //     fillColor: '#FF0000',
							        //     fillOpacity: 0.35,
							        //     map: map,
							        //     center: citymap[city].center,
							        //     radius: Math.sqrt(citymap[city].population) * 100
							        //   });
							        // }

									marker.setMap(map);
									//########## Display flight details ##########
									setLatitude("lat");
									setLongitude("lng");
									setDroneName("drone_name");
									setRegNumber("reg_number");
									setDate();
									processDistanceAndDuration();
									check_flight_status();
								}
							}
	  					},
	  					error: function(XMLHttpResquestm, textStatus, errorThrown){
	  						console.log(textStatus, errorThrown);
	  					}
	    			});	
					//Call ajax auto_load function every 5 seconds to reload marker on map 
					setInterval(auto_load, 9000);
				});
		
				//Condition to get initial simulated polyLat (drone latitude)
				var testVar = 0;
				//Make calls at an interval to reload the map
				function auto_load(){	
					//Ajax function to get marker data from mappage controller : index action 
					$.ajax({
						type: "GET",
						url: "<%= Rails.application.routes.url_helpers.mappage_index_path %>",
						cache: false,
						contentType: 'application/json',
						dataType: "json",
						data: <%= raw @hash.to_json %>,
						success: function(result){  
							//console.log(result);
							//console.log(marker.getTitle());
							var bounds = new google.maps.LatLngBounds();
							for(var i = 0; i < result.length; i++){
								//Precondition: Clicked drone from initial view (mappage#index) is the same as one of the drones on initial view 
								if( result[i]['infowindow'] == marker.getTitle() && regNumber == result[i]['marker_title']){
									//Remove marker icon from map 
									marker.setMap(null);

									//************** SET SIMULATION FOR ALL POSSIBLE DIRECTIONS (NOT PERFECT) **************//
									//################## Case 1 : A markerLat < B markerLat & Alng > Blng ##################//
									//Rebuild map marker with data recieved from mappage controller : index action
									if(geocoded_arrival_lat > geocoded_depart_lat && geocoded_arrival_lng < geocoded_depart_lng){
										if(testVar == 0)
											//Increase DroneLat
											polyLat = result[i]['lat']+simulatedLatIncrease;
										if(polyLat < geocoded_arrival_lat){
											
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Decrease DroneLng
											polyLng = result[i]['lng']-simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
										else if(polyLat >= geocoded_arrival_lat){
											//Decrease DroneLat
											simulatedLatIncrease = 0.001;
											simulatedLngIncrease = 0.0001;
											polyLat = polyLat-simulatedLatIncrease;
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Increase DroneLng
											polyLng = polyLng-simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
									}
									//####################################################################################//
									//################## Case 2 : B markerLat < A markerLat Blng > Alng ##################//
									//Rebuild map marker with data recieved from mappage controller : index action
									if(geocoded_arrival_lat < geocoded_depart_lat && geocoded_arrival_lng > geocoded_depart_lng){
										if(testVar == 0)
											//Increase DroneLat
											polyLat = result[i]['lat']-simulatedLatIncrease;
										if(polyLat > geocoded_arrival_lat){
									
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Decrease DroneLng
											polyLng = result[i]['lng']+simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
										else if(polyLat <= geocoded_arrival_lat){
											//Decrease DroneLat
											simulatedLatIncrease = 0.001;
											simulatedLngIncrease = 0.0001;
											polyLat = polyLat+simulatedLatIncrease;
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Increase DroneLng
											polyLng = polyLng-simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
									}
									//######################################################################################//
									//################## Case 3 : A markerLat < B markerLat & Alng < Blng ##################//
									//Rebuild map marker with data recieved from mappage controller : index action
									if(geocoded_arrival_lat > geocoded_depart_lat && geocoded_arrival_lng > geocoded_depart_lng){
										if(testVar == 0)
											//Increase DroneLat
											//simulatedLatIncrease = 0.0012;
											polyLat = result[i]['lat']+simulatedLatIncrease;
										if(polyLat < geocoded_arrival_lat){
									
											simulatedLatIncrease = simulatedLatIncrease + 0.00020;
											//Decrease DroneLng
											polyLng = result[i]['lng']+simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
										else if(polyLat >= geocoded_arrival_lat){
											//Decrease DroneLat
											simulatedLatIncrease = 0.001;
											simulatedLngIncrease = 0.0001;
											polyLat = polyLat-simulatedLatIncrease;
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Increase DroneLng
											polyLng = polyLng-simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
									}
									//######################################################################################//
									//################## Case 4 : B markerLat < A markerLat & Blng < Alng ##################//
									//Rebuild map marker with data recieved from mappage controller : index action
									if(geocoded_arrival_lat < geocoded_depart_lat && geocoded_arrival_lng < geocoded_depart_lng){
										if(testVar == 0)
											//Increase DroneLat
											//simulatedLatIncrease = 0.0012;
											polyLat = result[i]['lat']-simulatedLatIncrease;
										if(polyLat > geocoded_arrival_lat){
									
											simulatedLatIncrease = simulatedLatIncrease + 0.00020;
											//Decrease DroneLng
											polyLng = result[i]['lng']-simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0009;
										}
										else if(polyLat <= geocoded_arrival_lat){
											//Decrease DroneLat
											simulatedLatIncrease = 0.001;
											simulatedLngIncrease = 0.0001;
											polyLat = polyLat+simulatedLatIncrease;
											simulatedLatIncrease = simulatedLatIncrease + 0.0005;
											//Increase DroneLng
											polyLng = polyLng+simulatedLngIncrease;
											simulatedLngIncrease = simulatedLngIncrease + 0.0012;
										}
									}
									//####################################################################################//

									//polyLat = result[i]['lat']+simulatedLatIncrease;
									//simulatedLatIncrease = simulatedLatIncrease + 0.0005;
									//polyLng = result[i]['lng']+simulatedLngIncrease;
									//simulatedLngIncrease = simulatedLngIncrease - 0.0012;
									myLatlng = new google.maps.LatLng(polyLat, polyLng);
									mapOptions = {
									  zoom: 14,
									  center: myLatlng
									}
									marker = new google.maps.Marker({
									    position: myLatlng,
									    title: result[i]['infowindow'],
									    icon: iconBase
									});
									
									//#### To add the marker to the map, call setMap() #####
									marker.setMap(map);
									bounds.extend(marker.position);
									//now fit the map to the newly inclusive bounds
									//map.fitBounds(bounds);

									//########## Display flight details ##########
									setLatitude("lat");
									setLongitude("lng");
									setDroneName("drone_name");
									setRegNumber("reg_number");
									setDate();
									processDistanceAndDuration();
									check_flight_status();
								}
							}
	  					},
	  					error: function(XMLHttpResquestm, textStatus, errorThrown){
	  						console.log(textStatus, errorThrown);
	  					}
	    			});	
				};

				function setLatitude(variable){
					var lat = document.getElementById(variable);
					lat.innerHTML = marker.getPosition().lat();
				}
				function setLongitude(variable){
					var lng = document.getElementById(variable);
					lng.innerHTML = marker.getPosition().lng();
				}
				function setDroneName(variable){
					var drone_name = document.getElementById(variable);
					drone_name.innerHTML = marker.getTitle();
				}
				function setRegNumber(variable){
					var reg_number = document.getElementById(variable);
					reg_number.innerHTML = regNumber;
				}
				function setDate(){
					var currentDate = new Date();
					document.getElementById("date").innerHTML = currentDate.toDateString();
				}

				//#### Process geocoding for departure address ####
				var geocoded_depart_lat;
				var geocoded_depart_lng;
				function geocodeDepartureAddress(geocoderDepart, resultsMap, addressType) {
			        var address = addressType;
			        geocoderDepart.geocode({'address': address}, function(results, status) {
			          if (status === 'OK') {
			            //resultsMap.setCenter(results[0].geometry.location);
			            geocoded_depart_lat = results[0].geometry.location.lat();
						geocoded_depart_lng = results[0].geometry.location.lng();
			            var departMarker = new google.maps.Marker({
			            	icon: "<%= ActionController::Base.helpers.asset_path('assets/brown_MarkerA.png') %>",
			              	map: resultsMap,
			              	position: results[0].geometry.location,
      						zIndex:99999999
			            });	  
			          } else {
			            alert('Geocode was not successful for the following reason: ' + status);
			          }
			        });
			    }

				//#### Process geocoding for arrival address ####
			    var geocoded_arrival_lat;
				var geocoded_arrival_lng;
			    function geocodeArrivalAddress(geocoderArrival, resultsMap, addressType) {
			        var address = addressType;
			        geocoderArrival.geocode({'address': address}, function(myResult, status) {
			          if (status === 'OK') {
			            //resultsMap.setCenter(myResult[0].geometry.location);
			            geocoded_arrival_lat = myResult[0].geometry.location.lat();
						geocoded_arrival_lng = myResult[0].geometry.location.lng();
			            var arrivalMarker = new google.maps.Marker({
			            	icon: "<%= ActionController::Base.helpers.asset_path('assets/brown_MarkerB.png') %>",
			              	map: resultsMap,
			              	position: myResult[0].geometry.location
			            });
			            setPolyline();
			          } else {
			            alert('Geocode was not successful for the following reason: ' + status);
			          }
			        });
			    }

			    //#### Process geocoding for arrival address ####
			    function setPolyline(){
			    	//############### Construct polyline ###############							        
			        var flightPlanCoordinates = [
			        	{lat: polyLat, lng: polyLng},
			          	{lat: geocoded_arrival_lat, lng: geocoded_arrival_lng}
			        ];
			        var flightPath = new google.maps.Polyline({
			          	path: flightPlanCoordinates,
			          	geodesic: true,
			          	strokeColor: 'rgb(69, 90, 100);',
			          	strokeOpacity: 1.0,
			          	strokeWeight: 3
			        });
			        //##### Add polyline to map #####
			        flightPath.setMap(map);
			    }
			    function processDistanceAndDuration(){
				    //############### Instantiate Directions Service ###############
				    var directionsService = new google.maps.DirectionsService();
				    ////############# DISTANCE AND DURATION ###############//
	    			var service = new google.maps.DistanceMatrixService();
	    			service.getDistanceMatrix({
				        origins: [departure],
				        destinations: [arrival],
				        travelMode: google.maps.TravelMode.DRIVING,
				        unitSystem: google.maps.UnitSystem.METRIC,
				        avoidHighways: false,
				        avoidTolls: false
				    }, function (response, status) {
				        if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
				            var distance = response.rows[0].elements[0].distance.text;
				            var duration = response.rows[0].elements[0].duration.text;
				            var distVar  = Number(distance.substring(0, distance.length-3));
				            var durVar   = Number(duration.substring(0, distance.length-5));
				            var distVarToMiles = distVar*0.621371;
				            //Validate time unit
				            if(duration.substring(duration.length-4, duration.length) == "mins"){
				            	durVar = durVar/60;
				            }
				            var speedVar = distVarToMiles/durVar;
				            
				            var dvDistance = document.getElementById("distance");
				            dvDistance.innerHTML = distVarToMiles.toFixed(2) + " miles";
				            var dvDuration = document.getElementById("duration");
				            dvDuration.innerHTML = duration; 
				            var dvSpeed = document.getElementById("speed");
				            dvSpeed.innerHTML = speedVar.toFixed(2) + " mph"; 
				        } else {
				            alert("Unable to find the distance via road.");
				        }
				    });
	    		}			

	    		var citymap;
	    		var cityCircle;
	    		var city;
	    		var test;
	    		var cityCircleArray = [];
	    		var rectangleArray = [];
	    		var k = 0;
	    		function render_restricted_areas_circles(){
			    	if (k == 0){
				    	//############### Construct No fly zone circles ###############							        
				        //########## Create object containing no-fly zones coordinates and population(population is temporary) ##########
					    citymap = {
						    fwConventionCenter: {
					          center: {lat: 32.7497, lng: -97.3277},
					          population: 30,
					        },
					        fwWestMeadowBrook: {
					          center: {lat: 32.7469, lng: -97.2734},
					          population: 30
					        },
					        testNoFlyZone: {
					          center: {lat: 32.7591, lng: -97.3139},
					          population: 30
					        },
					        shreveportRegional: {
					        	center: {lat: 32.4546, lng: -93.8285},
					        	population:30
					        }
				      	};
			      		//############### Construct the circle for each value in citymap ###############
				        // Note: We scale the area of the circle based on the population.
				        for (city in citymap) {
				          // Add the circle for this city to the map.
			          		cityCircleArray[k] = new google.maps.Circle({
					            strokeColor: '#FF0000',
					            strokeOpacity: 0.8,
					            strokeWeight: 2,
					            fillColor: '#FF0000',
					            fillOpacity: 0.3,
					            map: map,
					            center: citymap[city].center,
					            radius: Math.sqrt(citymap[city].population) * 100
			          		});

			          		//############### Construct the rectangle for each value in bounds below ###############
					        rectangleArray[k] = new google.maps.Rectangle({
					        	strokeColor: '#ffbb33',
					          	strokeOpacity: 0.8,
					          	strokeWeight: 2,
					          	fillColor: '#ffbb33',
					          	fillOpacity: 0.45,
					          	map: map,
					          	bounds: {
					            	north: 32.7476,
					            	south: 32.7436,
					            	east: -97.3649,
					            	west: -97.3689
					          	}
					        });
			          		k = k + 1;
				        }
				    }
			    }		    
			    function remove_restricted_areas_circles(){
			    	for(var i = 0; i < cityCircleArray.length; i++){
			    		cityCircleArray[i].setMap(null);
			    	}		    	
			    	cityCircleArray.length = 0;
			    	for(var i = 0; i < rectangleArray.length; i++){
			    		rectangleArray[i].setMap(null);
			    	}		    	
			    	rectangleArray.length = 0;
			    	k = 0;
			    }
			    function check_flight_status(){
			    	var check_lat = document.getElementById("lat").innerHTML;
			    	var check_lng = document.getElementById("lng").innerHTML;
			    	if( check_lat >= 32.7571 && check_lat <= 32.7583){
			    		//Change flight status notification background color
			    		document.getElementById("warning_div").style.backgroundColor = "rgba(214,50,50,0.2)";
			    		document.getElementById("marqueeFlightStatus").innerHTML = "Flight Status: Drone is approaching no-fly zone...";
			    	}
			    	else if(check_lat > 32.7583 && check_lat <= 32.7605){
			    		document.getElementById("warning_div").style.backgroundColor = "rgba(214,50,50,0.2)";
			    		document.getElementById("marqueeFlightStatus").innerHTML = "Flight Status: Drone is in no-fly zone..Please change course.";
			    	}
			    	else{
			    		//Change flight status notification background color
			    		document.getElementById("warning_div").style.backgroundColor = "green";
			    		document.getElementById("marqueeFlightStatus").innerHTML = "Flight Status: OK";
			    	}
			    }
			</script>
		</div>
	</div>

	<div class="row">
		<div class="col-lg-12 col-md-12 col-sm-12" id="single_page_bottom_wrapper">
			<div class="row" style="margin-top: 10px;">
				<div class="col-lg-6 col-md-6 col-sm-12">
					<h4 style="color: rgba(255,255,255,0.8); text-align: center;">Your Flight Details</h4>
					<div style="background: rgb(69, 90, 100); height: auto; min-height: 230px;">
						<div id="flight_details" style="color: rgba(255,255,255,0.9);">
							<table id="table_flight_details">
								<col style="width:20%">
						        <col style="width:30%">
						        <col style="width:30%">
						        <col style="width:20%">
						        <thead>
									<tr>
										<th>Latitude</th>
										<th>Longitude</th>
										<th>Drone Name</th>
										<th>Reg. Number</th>
									</tr>
								</thead>
								<tr>
									<td><span id="lat"></span></td>
									<td><span id="lng"></span></td>
									<td><span id="drone_name"></span></td>
									<td><span id="reg_number"></span></td>
								</tr><tr></tr>
								<tr>
									<thead>
										<tr>
											<th>Duration</th>
											<th>Distance</th>
											<th>Speed</th>
										</tr>
									</thead>
									<tr>
										<td><span id="duration"></span></td>
										<td><span id="distance"></span></td>
										<td><span id="speed"></span></td>
									</tr>
								</tr>
							</table>
							<h6>YOU WILL GET WARNING NOTIFICATIONS BELOW. </h6>
							<div id ="warning_div" class="panel ">
								<h6 class="marqueeFlightDetailsStatus" id="marqueeFlightStatus">Flight Status: OK</h6>
							</div>
						</div>
					</div>
				</div>
				<div class="col-lg-6 col-md-6 col-sm-12">
					<h4 style="color: rgba(255,255,255,0.8); text-align: center;">Activity Log</h4>
					<div style="background: rgb(69, 90, 100);  height: auto; min-height: 230px;">
						<div id="activity_log" style="color: rgba(255,255,255,0.9);">
							<table id="table_activity_log">
								<col style="width:20%">
						        <col style="width:20%">
						        <col style="width:20%">
						        <col style="width:20%">
						        <col style="width:20%">
						        <thead>
									<tr>
										<th>Date</th>
										<th>Time</th>
										<th>Departure</th>
										<th>Arrival</th>
									</tr>
								</thead>
								<tr>
									<td><span id="date"></span></td>
									<td><span id="time"></span>
										<script type="text/javascript">
											function setTime(){
												var currentTime = new Date(new Date().getTime()).toLocaleTimeString();
												document.getElementById("time").innerHTML = currentTime;
											}
											setInterval(setTime, 1000);
										</script>
									</td>
									<td><span id="departure"></span></td>
									<td><span id="arrival"></span></td>
								</tr>
							</table><br />
							<input onclick="render_restricted_areas_circles();" type="button" name="render_restricted_areas_circles" value="View Restricted Areas" class="btn btn-lg btn-success" id="no_fly_zone_button" style="font-size: 12px; text-align: center; padding:5px; height: 30px; margin-top:30px; width: 175px; font-weight: bold; color: rgba(255,255,255,1);"> <br />

							<input onclick="remove_restricted_areas_circles();" type="button" name="remove_restricted_areas_circles" value="Remove Restricted Areas" class="btn btn-lg btn-success" id="remove_no_fly_zone_button" style="font-size: 12px; text-align: center; padding:5px; height: 30px; margin-top:5px; width: 175px; font-weight: bold; color: rgba(255,255,255,1);">
							 &nbsp; &nbsp; &nbsp; &nbsp;
							<img src="<%= asset_path('no-fly-zone2.png')%>">  No-Fly Zone
							 &nbsp; &nbsp; &nbsp; &nbsp;
							<img src="<%= asset_path('Tall-buildings.png')%>">  Tall Building
						</div>
					</div>
				</div>
			</div>
		</div>		
	</div>
</div>
<!-- Bottom Extra :) -->
<div style="background: rgba(0,0,0,0.8); height: 90px; ">
</div>












